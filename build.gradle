import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
  repositories {
    mavenCentral()
  }

}

ext {
  // The drivers we want to use
  drivers = ['chrome','htmlunit','firefox']

  ext {
    groovyVersion = '2.4.7'
    gebVersion = '0.13.1'
    seleniumVersion = '2.52.0'
    chromeDriverVersion = '2.22'
  }
}
task wrapper(type: Wrapper) {
  gradleVersion = '2.12' //version required
}

apply plugin: 'groovy'
apply from: "gradle/osSpecificDownloads.gradle"

repositories {
  mavenCentral()
}

dependencies {
  testCompile "org.gebish:geb-spock:$gebVersion"
  testCompile("org.spockframework:spock-core:1.0-groovy-2.4") {
    exclude group: "org.codehaus.groovy"
  }
  testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
  testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
  testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
  testCompile "org.seleniumhq.selenium:selenium-htmlunit-driver:$seleniumVersion"
}

def loadProperties() {
  def environment = hasProperty('env') ? env : 'dev'
  println "Environment is set to $environment"

  def configFile = file('Config.groovy')
  def config = new ConfigSlurper(environment).parse(configFile.toURL())
  setProperty 'config', config
}

loadProperties()

drivers.each { driver ->
  task "${driver}Test"(type: Test) {

    systemProperty 'BASE_URL', config.base_url

    reports {
      html.destination = reporting.file("$name/tests")
      junitXml.destination = file("$buildDir/test-results/$name")
    }

    outputs.upToDateWhen { false }  // Always run tests

    systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
    systemProperty "geb.env", driver
  }
}

chromeTest {
  dependsOn unzipChromeDriver

  def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
  systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}

test {
  dependsOn firefoxTest
  enabled = false
}
